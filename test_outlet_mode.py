from selenium.webdriver.common.by import By
from src.testproject.classes import DriverStepSettings, StepSettings
from src.testproject.decorator import report_assertion_errors
from src.testproject.enums import SleepTimingType
from src.testproject.sdk.drivers import webdriver
import pytest


"""
This pytest test was automatically generated by TestProject
    Project: My first Project
    Package: TestProject.Generated.Tests.MyFirstProject
    Test: Outlet Mode
    Generated by: Mark Fomin (mark.fomin@snapav.com)
    Generated on 04/04/2021, 14:15:37
"""


@pytest.fixture()
def driver():
    driver = webdriver.Chrome(token="M6Gu8aizHS0kAhauLGOjq_njGR6N6C12XiElIez3Yuw1",
                              project_name="My first Project",
                              job_name="Outlet Mode")
    step_settings = StepSettings(timeout=15000,
                                 sleep_time=500,
                                 sleep_timing_type=SleepTimingType.Before)
    with DriverStepSettings(driver, step_settings):
        yield driver
    driver.quit()


@report_assertion_errors
def test_main(driver):
    """Configure outlet mode from Enabled to all options."""
    # Test Parameters
    # Auto generated application URL parameter
    ApplicationURL = "https://app.ovrc.com"

    # 1. Navigate to '{ApplicationURL}'
    # Navigates the specified URL (Auto-generated)
    driver.get(f'{ApplicationURL}')

    # 2. Type 'mark.fomin@snapav.com' in 'email'
    email = driver.find_element(By.CSS_SELECTOR,
                                "[name='email']")
    email.send_keys("mark.fomin@snapav.com")

    # 3. Click 'password'
    password = driver.find_element(By.CSS_SELECTOR,
                                   "[name='password']")
    password.click()

    # 4. Type 'SnapAV704' in 'password'
    password = driver.find_element(By.CSS_SELECTOR,
                                   "[name='password']")
    password.send_keys("SnapAV704")

    # 5. Click 'SPAN'
    # LOGIN BUTTON
    span = driver.find_element(By.XPATH,
                               "//button/span[2]")
    span.click()

    # 6. Click 'SPAN1'
    # DEVICES TAB
    span1 = driver.find_element(By.XPATH,
                                "//a[2]/span/span[3]")
    span1.click()

    # 7. Click '192.168.22.120'
    # WB-800-IPVM-12 DEVICE in list
    _192_168_22_120 = driver.find_element(By.XPATH,
                                          "//span[. = '192.168.22.120']")
    _192_168_22_120.click()

    # 8. Click 'SPAN2'
    # CONFIGURE TAB
    span2 = driver.find_element(By.XPATH,
                                "//a[2]/span/span[3]")
    span2.click()

    # 9. Click 'SPAN3'
    # OUTLET OPTIONS
    span3 = driver.find_element(By.XPATH,
                                "//div[2]/div/div[1]/div/div[1]/a/span/span[2]")
    span3.click()

    # 10. Does 'Enabled' contain 'Enabled'?
    # Check outlet 1 for default enabled value.
    enabled = driver.find_element(By.XPATH,
                                  "//div[1]/div[3]/div/div/div[3]/div/div/span[. = 'Enabled']")
    step_output = enabled.text
    assert step_output and ("Enabled" in step_output)

    # 11. Click 'SPAN5'
    # Outlet1_DROPDOWN
    span5 = driver.find_element(By.XPATH,
                                "//div[1]/div[3]/div/div/div[3]/div/div/div/span")
    span5.click()

    # 12. Click 'Network Device (Reset Only)'
    # Choosing Network Device Option
    network_device_reset_only_ = driver.find_element(By.XPATH,
                                                     "//div[2]/div/div/div/div/div/div[. = 'Network Device (Reset Only)']")
    network_device_reset_only_.click()

    # 13. Does 'Network Device (Reset Only)1' contain 'Network Device (Reset Only)'?
    network_device_reset_only_1 = driver.find_element(By.XPATH,
                                                      "//div[1]/div[3]/div/div/div[3]/div/div/span[. = 'Network Device (Reset Only)']")
    step_output = network_device_reset_only_1.text
    assert step_output and ("Network Device (Reset Only)" in step_output)

    # 14. Click 'SPAN4'
    # SAVE button
    span4 = driver.find_element(By.XPATH,
                                "//div[2]/button/span[2]")
    span4.click()

    # 15. Click 'SPAN3'
    # OUTLET OPTIONS
    span3 = driver.find_element(By.XPATH,
                                "//div[2]/div/div[1]/div/div[1]/a/span/span[2]")
    span3.click()

    # 16. Does 'Network Device (Reset Only)1' contain 'Network Device (Reset Only)'?
    network_device_reset_only_1 = driver.find_element(By.XPATH,
                                                      "//div[1]/div[3]/div/div/div[3]/div/div/span[. = 'Network Device (Reset Only)']")
    step_output = network_device_reset_only_1.text
    assert step_output and ("Network Device (Reset Only)" in step_output)

    # 17. Click 'SPAN5'
    # Outlet1_DROPDOWN
    span5 = driver.find_element(By.XPATH,
                                "//div[1]/div[3]/div/div/div[3]/div/div/div/span")
    span5.click()

    # 18. Click 'Enabled1'
    # Choosing ENABLE option.
    enabled1 = driver.find_element(By.XPATH,
                                   "//div/div/div[3]/div[2]//div[. = 'Enabled']")
    enabled1.click()

    # 19. Does 'Enabled' contain 'Enabled'?
    enabled = driver.find_element(By.XPATH,
                                  "//div[1]/div[3]/div/div/div[3]/div/div/span[. = 'Enabled']")
    step_output = enabled.text
    assert step_output and ("Enabled" in step_output)

    # 20. Click 'SPAN4'
    # SAVE button
    span4 = driver.find_element(By.XPATH,
                                "//div[2]/button/span[2]")
    span4.click()

    # 21. Click 'SPAN3'
    # OUTLET OPTIONS
    span3 = driver.find_element(By.XPATH,
                                "//div[2]/div/div[1]/div/div[1]/a/span/span[2]")
    span3.click()

    # 22. Does 'Enabled' contain 'Enabled'?
    # Check outlet 1 for default enabled value.
    enabled = driver.find_element(By.XPATH,
                                  "//div[1]/div[3]/div/div/div[3]/div/div/span[. = 'Enabled']")
    step_output = enabled.text
    assert step_output and ("Enabled" in step_output)
